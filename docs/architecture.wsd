@startuml Brushed-Motor-Controller-Hostapp
allow_mixing
skin rose

  title NRF52840-Brushed-Motor-Controller-HostApp

  node "HostApp - Desktop Serial" {
  package Frontend{
    class MainWindow {
      - uint? TechnologyIndex
      - List<CallbackInterface> BackendImplementations
      + NLog.Logger? Logger
      + MainWindow()
      - void OpenAppSettings(object sender)
      + void EnableLogging()
      + void DisableLogging()
      - void ConnType_SelectionChanged(object sender)
      - void ScanDevices(object sender)
      - void SelectDevice_SelectionChanged(object sender)
      - void ConnectDevice(object sender)
      - void OpenConnectionOptions(object sender)
      - void Init(object sender)
      - void OpenInitParams(object sender)
      ..
      - void SetMode(object sender)
      - void GetMode(object sender)
      - void updateModeTextBox()
      - void enableDisableGuiElementsSetSpeedPos()
      {method} TODO - Not fully implemented
      ..
      - void SetSpeed(object sender)
      - void GetSpeed(object sender)
      ..
      - void SetPosition(object sender)
      - void GetPosition(object sender)
      {method} TODO - Not fully implemented
      ..
      - void OffOnDevice(object sender)
      - void GetOffOnState(object sender)
      - void enableDisableGuiElementsOffOn()
      ..
      - void disableStackPanels(List<string> namesOfPanels)
      - void openMessageWindow(string message)
    }

    class MessageBox {
      + MessageBox()
      + Task<> Show()
    }

    class InitOptions {
      + InitOptions()
      - void UpdateInitValues()
      - void SaveInitConfigToFile()
      - void LoadInitConfigToFile()
      {method} TODO - Not fully implemented
    }

    class ConnectionOptions {
      +ConnectionOptions()
      TODO
      {method} TODO - Not fully implemented
    }

    class GeneralSettings {
      - MainWindow ParentWindow
      + GeneralSettings(MainWindow parentWindow)
      + void Show()
      - void LoggingCheckBox_Checked()
      - void LoggingCheckBox_UnChecked()
    }
  }

  package Backend{
    class CallbackBT {
      TODO - To be implemented
      + CallbackBT()
      + void ListDevices()
      + List<string> GetConnectionsAsStringList();
       {method} etc.
    }

    class CallbackSerialShell {
      - List<SerialDriverConnection> ListOfDevices
      - uint? connectionIndex
      + HostappBackendSerial()
      + void ListDevices()
      + List<string> GetConnectionsAsStringList();
       {method} etc.
    }

    Interface CallbackInterface {
      + void ListDevices()
      + List<string> GetConnectionsAsStringList();
      + void ChooseConnectionByIndex(uint index);
      + void OpenConnection();
      ..
      + void SendInitialisation();
      ..
      + void SetMode(ControlMode new_mode);
      + ControlMode GetMode();
      ..
      + void SetSpeed(uint target_speed_in_mrpm);
      + uint GetSpeed();
      ..
      + void SetPosition(uint new_position);
      + uint GetPosition();
      ..
      + void TurnDriverOn();
      + void TurnDriverOff();
      + bool GetOfOon();
      ..
      + void CloseConnection();
    }

    package Utils{
      Enum ControlModes_Cs {
        SPEED,
        POSITION
      }

      Enum MotorDirection_Cs{
        FORWARD,
        BACKWARD
      }

      package Exceptions{
        DriverException <|-up- Exception
        class DriverException {
        }

        DeviceNotConnectedException <|-up- DriverException

        class DeviceNotConnectedException  {
        }

        ErrorFromDriverException <|-up- DriverException

        class ErrorFromDriverException  {
        }

        etc <|-up- DriverException

        class etc  {
        }
      }

      class SerialDriverConnection{
        + string Port
        + string HardwareID
        + string SoftwareVersion
        - SerialPort? SerialConnection
        + SerialDriverConnection(string port, string hw_id, string sw_ver)
        + void open_serial_port()
        + void write_data(string str_of_data)
        + List<string> read_lines()
        + void close_serial_port()

      }
    }
  }
}

@enduml
